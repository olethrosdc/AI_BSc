#+TITLE: Uninformed search
#+AUTHOR: Christos Dimitrakakis
#+EMAIL:christos.dimitrakakis@unine.ch
#+LaTeX_HEADER: \input{preamble}
#+LaTeX_CLASS_OPTIONS: [smaller]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+TAGS: activity advanced definition exercise homework project example theory code
#+OPTIONS:   H:3
#+latex_header: \AtBeginSubsection[]{\begin{frame}<beamer>\tableofcontents[currentsubsection]\end{frame}}

* Introduction
** Introduction
*** Search to find a solution
- Input: Problem specification (e.g. route-finding)
- Output: Solution (e.g. a policy)

**** Algorithms for finding solutions
- Must *search* through solution space
- Must return an *feasible* solution
- Will ideally return an *optimal* solution
*** Graphs in Search Algorithms
**** Problem Graph
- Specifies the problem.
- An abstraction of a real-world problem
**** Search Graph
- Saves the state of the search.

*** A gridworld
[[./figures/gridworld.pdf]]
*** A gridworld-maze problem
**** Graph
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
\begin{tikzpicture}[every edge quotes/.style = {auto, font=\footnotesize, sloped}]
      \node[RV,label=below:{\alert{start}}] at (0,0) (0) {0};
      \node[RV] at (0,2) (1) {1};
      \node[RV] at (0,4) (2) {2};
      \node[RV] at (2,0) (3) {3};
      \node[RV] at (2,2) (4) {4};
      \node[RV] at (2,4) (5) {5};
      \node[RV] at (4,0) (6) {6};
      \node[RV] at (4,2) (7) {7};
      \node[RV,label=above:{\alert{goal}}] at (4,4) (8) {8};
      \draw[->] (0) edge["a=U", bend right] (1);
      \draw[->] (1) edge["a=U", bend right] (2);
      \draw[->] (1) edge["a=D", bend right] (0);
      \draw[->] (2) edge["a=D", bend right] (1);
      \draw[->] (2) edge["a=R", bend right] (5);
      \draw[->] (5) edge["a=L", bend right] (2);
      \draw[->] (4) edge["a=U", bend right] (5);
      \draw[->] (5) edge["a=D", bend right] (4);
      \draw[->] (4) edge["a=R", bend right] (7);
      \draw[->] (7) edge["a=L", bend right] (4);
      \draw[->] (7) edge["a=U", bend right] (8);
      \draw[->] (8) edge["a=D", bend right] (7);
      \draw[->] (3) edge["a=U", bend right] (4);
      \draw[->] (4) edge["a=D", bend right] (3);
      \draw[->] (0) edge["a=R", bend right] (3);
      \draw[->] (3) edge["a=L", bend right] (0);
      \draw[->] (3) edge["a=R", bend right] (6);
      \draw[->] (6) edge["a=L", bend right] (3);
\end{tikzpicture}
**** Properties                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
#+ATTR_BEAMER: :overlay +-
- States: $S = \{0, \ldots, 8\}$
- Actions: $A = \{U, D, L, R\}$.
- Policy: $\pol : S \to A$ chooses an action in every state.
#+BEAMER: \pause
|---+---|
| S | A |
|---+---|
| 0 |   |
| 1 |   |
| 2 |   |
| 3 |   |
| 4 |   |
| 5 |   |
| 6 |   |
| 7 |   |
| 8 |   |
|---+---|

** Graphs

*** Graph definitions
**** Graph $G = \langle N, E \rangle$ (/graphe/)
A graph $G$ is defined by:
- Set of *nodes* $N$ (un sommet)
- Set of *edges* $E$ (une arÃªte), with $\langle x,y \rangle \in E$ and $x, y \in N$
**** Labels and costs (/ettiquettes, coutes/)
- Nodes can be labelled as e.g. start and goal *states*.
- Arcs can be labelled according to *actions*.
**** Paths and cycles (/chemins, circuits/)
- A path $h$ from $x$ to $y$ in $N$ is a sequence $\langle n_0, \ldots, n_k \rangle$ so that
  $n_0 = x, n_k = y$ and $\langle n_{t}, n_{t+1} \rangle \in A$.
- We write $h_j$ for the $j$-th element of the path.
- A cycle is a path $\langle n_0, \ldots, n_k \rangle$ where $n_0 = n_k$.
- If a graph has no cycles, it is *acyclic*
- A state with no outgoing edges to other states is *terminal*

*** Graph labels
\begin{tikzpicture}[every edge quotes/.style = {auto, font=\footnotesize, sloped}]
      \node[RV,label=below:{start}] at (0,0) (0) {0};
      \node[RV] at (0,2) (1) {1};
      \node[RV] at (4,2) (2) {2};
      \node[RV,label=below:{goal}] at (4,0) (3) {3};
      \draw[->] (0) edge["a=1~c=1"] (1);
      \draw[->] (1) edge["a=0~c=2"] (2);
      \draw[->] (0) edge["a=0~c=5"] (3);
      \draw[->] (2) edge["a=0~c=1"] (3);
\end{tikzpicture}
- Action labels $a$: Tell you which action traverses an edge
- Edge costs $c$: Optionally, $c$
- Node labels: Some nodes are *goal* or *start* nodes.
**** Notation
- For a node $i \in N$, we write $g(i) = 1$ if it's a goal label.
- For an edge $(i,j) \in E$, we write $c(i, j) \in \Reals$ for its cost.
- The total cost for a path $h = \langle x, \ldots, y \rangle$ from node $x$ to a node $y$ is
\[
\sum_{k=1}^{|p|-1} c(p_k, p_{k+1}), \qquad \textrm{where $|p|$ is the length of $p$}
\]

*** Tree example
\begin{tikzpicture}
      \node[RV] at (0,0) (0) {0};
      \node[RV] at (1,1) (1) {1};
      \node[RV] at (1,-1) (2) {2};
      \node[RV] at (2,1.5) (3) {3};
      \node[RV] at (2,0.5) (4) {4};
      \node[RV] at (2,-0.5) (5) {5};
      \node[RV] at (2,-1.5) (6) {6};
      \draw[->] (0) to (1);
      \draw[->] (0) to (2);
      \draw[->] (1) to (3);
      \draw[->] (1) to (4);
      \draw[->] (2) to (5);
      \draw[->] (2) to (6);
\end{tikzpicture}
- No matter where the goal is, there is a unique path to it.
- Depending on how the edges are ordered, finding it may require up to 6 steps.
- For binary trees of depth $D$, the worst-case complexity is $2^D$.
- The *branching factor* is the number of children that each node can have.

*** Shortcut example
\begin{tikzpicture}
      \node[RV] at (0,0) (0) {0};
      \node[RV] at (1,0) (1) {1};
      \node[RV] at (2,0) (2) {2};
      \node[RV] at (3,0) (3) {3};
      \node[RV] at (1,1) (4) {4};
      \node[RV] at (1,-1) (5) {5};
      \draw[->] (0) to (1);
      \draw[->] (1) to (2);
      \draw[->] (2) to (3);
      \draw[->] (1) to (5);
      \draw[->] (1) to (4);
      \draw[->] (4) to (3);
\end{tikzpicture}
- There are two paths to node 3.
- Depending on how we search, we may find the longest path first.
- Why would we *prefer* one path to another?
- How should we search to find the /best/ path?
** Searching graphs
*** Two types of graphs
**** State-space graphs: describe the problem
- Shows how to get from one state to the other
- Shows how much cost/reward we incur/obtain
- Shows what are start and goal sates
**** Search graphs: summarise the solution state
- Show which nodes we visited
- Summarise the best solution
- Allow us to choose the next node to visit in a clever way

*** Graph visualisation
**** State space graph                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
State-space graph
\begin{tikzpicture}
      \node[RV] at (0,0) (0) {0};
      \node[RV] at (1,0) (1) {1};
      \node[RV] at (2,0) (2) {2};
      \node[RV] at (3,0) (3) {3};
      \node[RV] at (1,1) (4) {4};
      \node[RV] at (1,-1) (5) {5};
      \draw (0) to (1);
      \draw (1) to (2);
      \draw (2) to (3);
      \draw (1) to (5);
      \draw (1) to (4);
      \draw (4) edge [bend left] (3);
\end{tikzpicture}
**** Search graph                                                     :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
Search graph

\begin{tikzpicture}
	\node[RV] at (0,0) (0) {0};
	\uncover<2->{
	\node[RV] at (1,0) (1) {1};
	\draw[->] (0) to (1);
	}
	\uncover<3->{
	\node at (2,0) (5) {5};
	\draw[->] (1) to (5);
	}		
	\uncover<4->{
	\node[RV] at (2,1) (4) {4};
	\draw[->] (1) to (4);
	}		
	\uncover<5->{
	\node at (3,1) (4-1) {1};
	\draw[->] (4) to (4-1);
	}	
	\uncover<6->{
	\node[RV] at (3,2) (3) {\alert{3}};
	\draw[->] (4) to (3);
	}	
\end{tikzpicture}

Our search algorithm selects the oldest node in the frontier first, and actions in the order D,U,L,R. 

*** State-space graphs
- $s \in S$: *state* space
- $a \in A$: *action* space (with $A_s \subset S$ *available* actions in state $s$)
- $\tau: S \times A \to A$: *transition* model (deterministic)
- When we reach a *terminal* state, we stop. 
#+BEAMER: \pause
**** Graph specification
- Nodes: $S$
- Edges from node $i$: $\{(i, \tau(i, a) | a \in A_s\}$
#+BEAMER: \pause
**** Problem specifications
One or more of the following:
- $g : S \to \{0, 1\}$: goal indicator
- $c : S \times A \to \Reals$: step cost or constraint.
- $r : S \times A \to \Reals$: step reward.
#+BEAMER: \pause
**** Solution specification
- $\pi : S \to A$ deterministic policy
- When problem and the policy are deterministic, the policy is *open loop*
*** The search graph
#+ATTR_BEAMER: :overlay +-
- Node $0$ is *root* of the search graph.
- Each node $i \in S'$ corresponds to a state $s^i \in S$.
- It also corresponds to a  *path* $s^0, \ldots, \parent(\parent(s^i)), \parent(s^i), s^{i}$.
- Node depth: $d_i = 1 + d_{\parent(i)}$, with $d_0 = 0$.
#+BEAMER: \pause
**** Frontier: what we can search.
Set $F_0 = \{0\}$ and set of searched nodes $S'_0 = \emptyset$. 

At step $k = 0, 1, \ldots$:
#+ATTR_BEAMER: :overlay +-
- The frontier is $F_k$, and searched nodes $S'_k$.
- Select a node $i$, where $s^i \notin S'_k$.
- We select action $a$ in node $i$, and observe $s' = \tau(s^i, a)$.
- $i + 1$ is now a child of $i$, with $s^{i+1} = s'$.
- Update the frontier $F_{k+1} = F_k \cup \{i + 1\} \setminus \{i\}$.
- In the end, no more nodes can be added: $F_k = \emptyset$ and $S'_k = S'_{k+1}$


* Uninformed search
** Depth-first search
*** Depth-first search example
**** State space graph                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
State-space graph
\begin{tikzpicture}
      \node[RV] at (0,0) (0) {0};
      \node[RV] at (1,0) (1) {1};
      \node[RV] at (2,0) (2) {2};
      \node[RV] at (3,0) (3) {3};
      \node[RV] at (1,1) (4) {4};
      \node[RV] at (1,-1) (5) {5};
      \draw (0) to (1);
      \draw (1) to (2);
      \draw (2) to (3);
      \draw (1) to (5);
      \draw (1) to (4);
      \draw (4) edge [bend left] (3);
\end{tikzpicture}
**** Search graph                                                     :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
Search graph

\begin{tikzpicture}
	\node[RV] at (0,0) (0) {0};
	\uncover<2->{
	\node[RV] at (1,0) (1) {1};
	\draw[->] (0) to (1);
	}
	\uncover<3->{
	\node at (2,0) (5) {5};
	\draw[->] (1) to (5);
	}		
	\uncover<4->{
	\node[RV] at (2,1) (4) {4};
	\draw[->] (1) to (4);
	}		
	\uncover<5->{
	\node at (3,1) (4-1) {1};
	\draw[->] (4) to (4-1);
	}	
	\uncover<6->{
	\node[RV] at (3,2) (3) {\alert{3}};
	\draw[->] (4) to (3);
	}	
\end{tikzpicture}

- Our search algorithm selects the *deepest* node in the frontier first, and actions in the order D,U,L,R. 
- What if our action search was ordered R, L, U, D ? 

*** Depth-first search

**** Generic depth-first search
\begin{algorithmic}
\STATE \textbf{global} $S' = \emptyset$ : Nodes searched
\STATE \textbf{input} $G = \langle N, E \rangle$: Graph.
\STATE \textbf{input} $n$ : Current node
\STATE \textbf{function} \texttt{DepthFirst}($G, n$)
  \STATE $S' = S' \cup \{n\}$ : mark $n$ as searched
  \FOR {$c \notin F: \langle c,j \rangle \in E$}
     \IF {$\texttt{DepthFirst}(G, j)$}
          \RETURN 1.
     \ENDIF
\ENDFOR
\end{algorithmic}
**** Discussion
- This function goes through all the nodes in the graph
- How can we use it to identify a paths to the goal?
- How can we modify it to identify all paths to the goal?
- How can we modify it to identify the shortest path to the goal?

*** Breadth-first search example
**** State space graph                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
State-space graph
\begin{tikzpicture}
      \node[RV] at (0,0) (0) {0};
      \node[RV] at (1,0) (1) {1};
      \node[RV] at (2,0) (2) {2};
      \node[RV] at (3,0) (3) {3};
      \node[RV] at (1,1) (4) {4};
      \node[RV] at (1,-1) (5) {5};
      \draw (0) to (1);
      \draw (1) to (2);
      \draw (2) to (3);
      \draw (1) to (5);
      \draw (1) to (4);
      \draw (4) edge [bend left] (3);
\end{tikzpicture}
**** Search graph                                                     :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
Search graph

\begin{tikzpicture}
	\node[RV] at (0,0) (0) {0};
	\uncover<2->{
	\node[RV] at (1,0) (1) {1};
	\draw[->] (0) to (1);
	}
	\uncover<3->{
	\node at (2,0) (5) {5};
	\draw[->] (1) to (5);
	}		
	\uncover<4->{
	\node[RV] at (2,1) (4) {4};
	\draw[->] (1) to (4);
	}		
	\uncover<5->{
	\node[RV] at (2,2) (2) {2};
	\draw[->] (1) to (2);
	}	
	\uncover<6->{
	\node[RV] at (3,1) (3) {\alert{3}};
	\draw[->] (4) to (3);
	}	
\end{tikzpicture}

- Our search algorithm selects the *shallowest* node in the frontier first, and actions in the order D,U,L,R. 
- What if our action search was ordered R, L, U, D ? 


*** Breadth-first search
Unlike Depth-First search, this cannot easily use a recursive function call
implementation.

\begin{algorithmic}

\STATE \textbf{input} $G = \langle N, E \rangle$: Graph.
\STATE \textbf{input} $x$ : Start node
\STATE \textbf{function} \texttt{BreadthFirst}($G, x$)
\STATE $S' = \emptyset$ : Nodes searched.
\STATE $F = \{x\}$. Initialise the frontier
\WHILE {$F \neq \emptyset$}
\STATE $s = \argmin_{i \in F} d_i$. Select minimum depth node.
\STATE $S' = S' \cup \{s\}$. Add $s$ to the list of searched nodes.
\STATE $F = F \setminus \{s\}$. Remove $s$ from the frontier.
\STATE $F = F \cup \child(s)$. Add $s$'s children to the frontier.
\ENDWHILE
\end{algorithmic}



*** Minimum-cost search    

Note that DFS always adds the minimum depth node. We can instead add the minimum-cost node.

\begin{algorithmic}

\STATE \textbf{input} $G = \langle N, E \rangle$: Graph.
\STATE \textbf{input} $x$ : Start node
\STATE \textbf{function} \texttt{BreadthFirst}($G, x$)
\STATE $S' = \emptyset$ : Nodes searched.
\STATE $F = \{x\}$. Initialise the frontier
\STATE $c_x = 0$. Initialise the cost of node $x$
\WHILE {$F \neq \emptyset$}
\STATE $n = \argmin_{f \in F} c_f$. Select minimum cost node.
\STATE $F = F \setminus \{n\}$. Remove $n$ from the frontier.
\IF {$n \notin S'$}
\STATE $B = \child(n) \setminus S'$. Get the set of unsearched children of $n$.
\STATE $\forall b \in B$, $b_i = c_n + c(n,b)$. Calculate the total cost to each child $b$.
\STATE $S' = S' \cup \{n\}$. Add $n$ to the list of searched nodes.
\STATE $F = F \cup B$. Add $n$'s children to the frontier.
\ENDIF
\ENDWHILE
\end{algorithmic}


